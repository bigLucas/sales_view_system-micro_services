service:
  name: data-generation

plugins:
  - serverless-deployment-bucket
  - serverless-webpack
  - serverless-export-env
  - serverless-offline

package:
  exclude:
    - test/**
    - test.*
    - .env
    - .git/**
    - .gitignore
    - .DS_Store
    - npm-debug.log
    - .serverless/**
    - .serverless_plugins/**

custom:
  webpack:
    keepOutputDirectory: true
    webpackConfig: ../../../../webpack.config.js
    # includeModules:
    #   packagePath: ../../../../package.json
    includeModules: false
  # webpackIncludeModules:
  #   forceInclude:
  #     - reflect-metadata
  # API Gateway URL
  # apiGwUrl:
  #   Fn::Join:
  #     - ''
  #     - - https://
  #       - "Fn::ImportValue": ddl-apigateway-id-${self:provider.stage}
  #       - .execute-api.
  #       - ${self:provider.region}
  #       - .amazonaws.com/
  #       - ${self:provider.region}
  # apiGwAuthorizer:
  #   Fn::ImportValue: ddl-authorizer-${opt:stage, 'server'}
  layerVersion:
    Fn::ImportValue: layer-version-id

provider:
  name: aws
  runtime: nodejs12.x
  region: ${opt:region, 'us-east-1'}
  stage: ${opt:stage, 'dev'}
  profile: default
  memorySize: 512
  timeout: 3
  logRetentionInDays: 7
  iamRoleStatements:
    - Effect: "Allow"
      Action: '*'
      Resource: '*'
  # apiGateway:
  #   restApiId:
  #     "Fn::ImportValue": ddl-apigateway-id-${self:provider.stage}
  #   restApiRootResourceId:
  #     "Fn::ImportValue": ddl-apigateway-rootid-${self:provider.stage}
  deploymentBucket:
    name: portfolio-deployment-bucket-${self:provider.stage}
    serverSideEncryption: AES256
  # endpointType: regional
  # Inject process.env variables here
  environment:
    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}
    # URL: ${self:custom.apiGwUrl}
    DATABASE_TYPE: ${file(../../../../env/env.${self:provider.stage}.json):DATABASE_TYPE}
    # DATABASE_HOST: ${self:custom.rdsEndpoint}
    # DATABASE_PORT: ${self:custom.rdsPort}
    # DATABASE_NAME: ${self:custom.databaseName}
    DATABASE_USERNAME: ${file(../../../../env/env.${self:provider.stage}.json):DATABASE_USERNAME}
    DATABASE_PASSWORD: ${file(../../../../env/env.${self:provider.stage}.json):DATABASE_PASSWORD}
    DATABASE_SYNCHRONIZE: ${file(../../../../env/env.${self:provider.stage}.json):DATABASE_SYNCHRONIZE}
    DATABASE_LOGGING: ${file(../../../../env/env.${self:provider.stage}.json):DATABASE_LOGGING}
    DATABASE_ENTITIES: src/api/models/**/*.ts
    DATABASE_ENTITIES_DIR: src/api/models
    DATABASE_MIGRATIONS: src/core/database/migrations/**/*.ts
    DATABASE_MIGRATIONS_DIR: src/core/database/migrations

functions:
  execute:
    handler: ./DataGenerationHandler.handler
    layers: 
      - ${cf:basic-layer-nodejs-lib.LayerVersionId}
    events:
      - schedule: cron(0 10 * * ? *) # run every day at 10 o'clock UTC time
